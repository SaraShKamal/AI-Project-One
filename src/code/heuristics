1- Greedy 1: that worked
package code;
import java.util.Comparator;
public class Greedy1Comparator  implements Comparator<State> {
        @Override
        public int compare(State o1, State o2) {
            int distance1 = estimateDistanceToGoal(o1);
            int distance2 = estimateDistanceToGoal(o2);

            // Compare in ascending order based on the estimated distance to the goal
            return Integer.compare(distance1, distance2);
        }

        private int estimateDistanceToGoal(State state) {
            // Implement your heuristic to estimate the remaining distance to the goal
            return Math.max(0, 100 - state.getProsperity());

        }
    }

//2- Greedy 2: the same
//3- A* 1: ?? ----> can be the same as greedy 1
//4- A* 2: ?? ----> can be the same as greedy 2
package code;
import java.util.Comparator;


public class AstarComparator2 implements Comparator<State> {
    @Override
    public int compare(State state1, State state2) {
        double fScore1 = calculateFScore(state1);
        double fScore2 = calculateFScore(state2);

        return Double.compare(fScore1, fScore2);
    }

    private double calculateFScore(State state) {
        double hScore = state.calculateCustomHeuristic();
        int gScore = state.getMoney_spent();

        return gScore + hScore;
    }
}

private int calculateHeuristic(State state) {
    int goalProsperity = 100;
    int currentProsperity = state.getProsperity();
    double percentageAchieved = (double) currentProsperity / goalProsperity;
    return (int) Math.ceil((1 - percentageAchieved) * goalProsperity);
}
